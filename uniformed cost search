C.add_child(D, 1)
C.add_child(G, 2)

D.add_child(G, 3)
_ = [print(node) for node in [S, A, B, C, D, G]]
from queue import PriorityQueue

def ucs(root, goal):
    """
    Return the uniform cost search path from root to gaol.
    
    Args:
        root: the starting node for the search
        goal: the goal node for the search
        
    Returns: a list with the path from root to goal
    
    Raises: ValueError if goal isn't in the graph
    """
    # create a priority queue of paths
    queue = PriorityQueue()
    queue.put((0, [root]))
    # iterate over the items in the queue
    while not queue.empty():
        # get the highest priority item
        pair = queue.get()
        current = pair[1][-1]
        # if it's the goal, return
        if current.label == goal:
            return pair[1]
        # add all the edges to the priority queue
        for edge in current.children:
            # create a new path with the node from the edge
            new_path = list(pair[1])
            new_path.append(edge.destination)
            # append the new path to the queue with the edges priority
            queue.put((pair[0] + edge.cost, new_path))
ucs(S, 'G')

5

